
# ‚Ññ17 (2 –±–∞–ª–ª–∞)
# –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö. –ï—ë
# —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–µ–π: –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –∑–∞–¥–∞–≤–∞—Ç—å –µ–≥–æ —Ç–µ–º—É,
# –≤—Ä–µ–º—è –µ–≥–æ –Ω–∞—á–∞–ª–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –¥–æ–∫–ª–∞–¥—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –≤—ã–≤–æ–¥–∏—Ç—å —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–∫–ª–∞–¥–∞, –≤—Ä–µ–º—è —Å–∞–º–æ–≥–æ
# –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –º–µ–∂–¥—É –¥–æ–∫–ª–∞–¥–∞–º–∏ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
# –ù–∞–¥–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–≤–∞ –∫–ª–∞—Å—Å–∞: ¬´–¥–æ–∫–ª–∞–¥¬ª –∏ ¬´–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è¬ª. –ö–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ–∂–¥—É –Ω–∏–º–∏
# —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, —Ä–µ—à–∞—Ç—å –í–∞–º. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ö–æ—Ä–æ—à–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å.


class Talk:
    def __init__(self, title: str, start_time_str: str, duration: int):
        self.title = title
        self.start_minutes = self._time_str_to_minutes(start_time_str)
        self.duration = duration
        self.end_minutes = self.start_minutes + self.duration

    def _time_str_to_minutes(self, time_str: str) -> int:
        hours, minutes = map(int, time_str.split(":"))
        return hours * 60 + minutes

    def _minutes_to_time_str(self, minutes: int) -> str:
        return f"{minutes // 60:02d}:{minutes % 60:02d}"

    def __str__(self):
        start = self._minutes_to_time_str(self.start_minutes)
        end = self._minutes_to_time_str(self.end_minutes)
        return f"{self.title} ({start} - {end})"

class Conference:
    def __init__(self):
        self.talks = []

    def add_talk(self, talk: Talk):
        for existing in self.talks:
            if self._overlaps(talk, existing):
                print(f"‚ö†Ô∏è –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –¥–æ–∫–ª–∞–¥–æ–º: '{existing.title}'")
                return
        self.talks.append(talk)
        print(f"‚úÖ –î–æ–∫–ª–∞–¥ '{talk.title}' –¥–æ–±–∞–≤–ª–µ–Ω")

    def _overlaps(self, t1: Talk, t2: Talk) -> bool:
        return t1.start_minutes < t2.end_minutes and t2.start_minutes < t1.end_minutes

    def show_schedule(self):
        print("\nüìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        for talk in sorted(self.talks, key=lambda t: t.start_minutes):
            print(f"  - {talk}")

    def total_talk_time(self):
        total = sum(talk.duration for talk in self.talks)
        print(f"\nüïì –û–±—â–µ–µ –≤—Ä–µ–º—è –¥–æ–∫–ª–∞–¥–æ–≤: {total} –º–∏–Ω—É—Ç")

    def longest_break(self):
        if len(self.talks) < 2:
            print("\n‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤.")
            return

        sorted_talks = sorted(self.talks, key=lambda t: t.start_minutes)
        max_break = 0

        for i in range(1, len(sorted_talks)):
            gap = sorted_talks[i].start_minutes - sorted_talks[i-1].end_minutes
            if gap > max_break:
                max_break = gap

        print(f"\nüõãÔ∏è –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –¥–æ–∫–ª–∞–¥–∞–º–∏: {max_break} –º–∏–Ω—É—Ç")

def main():
    conf = Conference()
    print("üîß –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏")
    
    while True:
        title = input("\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–æ–∫–ª–∞–¥–∞ (–∏–ª–∏ '–≤—ã—Ö–æ–¥'): ")
        if title.lower() == '–≤—ã—Ö–æ–¥':
            break

        start = input("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—á—á:–º–º): ")
        duration = int(input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ –º–∏–Ω—É—Ç–∞—Ö): "))
        
        talk = Talk(title, start, duration)
        conf.add_talk(talk)

    conf.show_schedule()
    conf.total_talk_time()
    conf.longest_break()

if __name__ == "__main__":
    main()

